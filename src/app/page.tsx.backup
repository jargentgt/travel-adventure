'use client'

import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { payloadService } from '@/utils/payloadService'
import { Trip, Activity, FilterOptions } from '@/types/trip'
import { LoadingScreen, LoadingSpinner } from '@/components/ui/LoadingSpinner'

export default function HomePage() {
  const [trips, setTrips] = useState<Trip[]>([])
  const [filteredTrips, setFilteredTrips] = useState<Trip[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedYear, setSelectedYear] = useState('all')
  const [selectedCountry, setSelectedCountry] = useState('all')
  const [filters, setFilters] = useState<FilterOptions>({})

  // Fallback trip data
  const fallbackTrip: Trip = {
    id: 'fallback-jeju',
    title: '2025 Jeju Island Adventure',
    slug: 'jeju-2025',
    startDate: '2025-09-20',
    endDate: '2025-09-28',
    location: 'Jeju Island, South Korea',
    country: 'South Korea',
    coverImage: {
      url: '', // Empty URL to trigger color background
      alt: 'Jeju Island Adventure',
      width: 800,
      height: 400
    },
    categories: ['Nature', 'Adventure', 'Culture', 'Food'],
    tags: ['island', 'autumn', 'korean-culture', 'food-tour'],
    days: [
      {
        date: '2025-09-20',
        activities: [
          { 
            id: 'fallback-activity-1',
            time: '09:00', 
            title: '도착 및 출발', 
            location: 'Jeju Airport',
            description: 'Arrival and departure',
            category: 'transport' as const, 
            type: 'normal' as const,
            icon: '✈️',
            date: '2025-09-20',
            trip: 'fallback-jeju',
            order: 1,
            createdAt: '2024-12-01',
            updatedAt: '2024-12-01'
          }
        ]
      }
    ],
    status: 'published' as const,
    createdAt: '2024-12-01',
    updatedAt: '2024-12-01'
  }

  useEffect(() => {
    let timeoutId: NodeJS.Timeout
    let loadingCompleted = false
    
    const loadWithTimeout = async () => {
      // Set timeout for loading - only applies if loading doesn't complete
      timeoutId = setTimeout(() => {
        if (!loadingCompleted && loading) {
          console.warn('⚠️ Loading timeout - using fallback data')
          setLoading(false)
          setTrips([fallbackTrip])
        }
      }, 15000)
      
      // Load trips
      try {
        const success = await loadTrips()
        loadingCompleted = true
        clearTimeout(timeoutId)
        
        if (success) {
          console.log('✅ Data loading completed successfully - timeout cleared')
        }
      } catch (error) {
        loadingCompleted = true
        clearTimeout(timeoutId)
        console.error('❌ Data loading failed:', error)
      }
    }
    
    loadWithTimeout()
    
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId)
      }
    }
  }, []) // Only run once on mount

  useEffect(() => {
    filterTrips()
  }, [trips, searchQuery, selectedYear, selectedCountry, filters])

  const loadTrips = async () => {
    try {
      console.log('🚀 Starting to load trips...')
      setLoading(true)
      
      const loadedTrips = await payloadService.loadTrips()
      console.log('✅ Trips loaded successfully:', loadedTrips.length)
      
      if (loadedTrips.length > 0) {
        setTrips(loadedTrips)
        console.log('✅ Real trip data loaded and set')
      } else {
        console.log('📋 No trips from CMS, using fallback')
        setTrips([fallbackTrip])
      }
      
      // Mark as successfully completed
      return true
    } catch (error) {
      console.error('❌ Error loading trips:', error)
      console.log('📋 Using fallback trip data due to error')
      setTrips([fallbackTrip])
      return false
    } finally {
      setLoading(false)
    }
  }

  // Extract country from location string
  const getCountryFromLocation = (location: string): string => {
    // Handle common patterns like "City, Country" or "Region, Country"
    const parts = location.split(',').map(part => part.trim())
    if (parts.length >= 2) {
      const lastPart = parts[parts.length - 1]
      // Map common country names
      const countryMap: { [key: string]: string } = {
        'South Korea': 'South Korea',
        '대한민국': 'South Korea',
        'Korea': 'South Korea',
        'Japan': 'Japan',
        '日本': 'Japan',
        'USA': 'USA',
        'United States': 'USA',
        'Thailand': 'Thailand',
        'Singapore': 'Singapore',
        'Malaysia': 'Malaysia',
        'Taiwan': 'Taiwan',
        '台灣': 'Taiwan',
        'Hong Kong': 'Hong Kong',
        '香港': 'Hong Kong',
        'China': 'China',
        '中国': 'China'
      }
      return countryMap[lastPart] || lastPart
    }
    // If no comma, try to detect country from common patterns
    if (location.includes('Korea') || location.includes('대한민국')) return 'South Korea'
    if (location.includes('Japan') || location.includes('日本')) return 'Japan'
    if (location.includes('Taiwan') || location.includes('台灣')) return 'Taiwan'
    if (location.includes('Hong Kong') || location.includes('香港')) return 'Hong Kong'
    if (location.includes('Singapore')) return 'Singapore'
    if (location.includes('Thailand')) return 'Thailand'
    if (location.includes('Malaysia')) return 'Malaysia'
    if (location.includes('China') || location.includes('中国')) return 'China'
    return location
  }

  // Get all unique countries from trips
  const getAllCountries = (): string[] => {
    const countries = trips.map(trip => getCountryFromLocation(trip.location))
    return Array.from(new Set(countries)).sort()
  }

  // Get all unique years from trips
  const getAllYears = (): string[] => {
    const years = trips.map(trip => new Date(trip.startDate).getFullYear().toString())
    return Array.from(new Set(years)).sort().reverse() // Most recent first
  }

  const filterTrips = () => {
    let filtered = trips

    // Filter by search query
    if (searchQuery) {
      filtered = filtered.filter(trip =>
        trip.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        trip.location.toLowerCase().includes(searchQuery.toLowerCase()) ||
        trip.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
      )
    }

    // Filter by year
    if (selectedYear !== 'all') {
      filtered = filtered.filter(trip => trip.startDate.includes(selectedYear))
    }

    // Filter by country
    if (selectedCountry !== 'all') {
      filtered = filtered.filter(trip => getCountryFromLocation(trip.location) === selectedCountry)
    }

    setFilteredTrips(filtered)
  }

  const getTripStats = (trip: Trip) => ({
    days: trip.days.length,
    activities: trip.days.reduce((acc, day) => acc + day.activities.length, 0),
    locations: trip.days.reduce((acc, day) => {
      const dayLocations = day.activities
        .filter((activity): activity is Activity => typeof activity === 'object')
        .map(activity => activity.location)
        .filter(Boolean)
      return acc + Array.from(new Set(dayLocations)).length
    }, 0)
  })

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  const clearAllFilters = () => {
    setSelectedYear('all')
    setSelectedCountry('all')
    setSearchQuery('')
  }

  // Show loading screen when initially loading
  if (loading && trips.length === 0) {
    return <LoadingScreen message="Loading travel adventures..." size="xl" type="dots" color="primary" />
  }

  const countries = getAllCountries()
  const years = getAllYears()
  const hasActiveFilters = selectedYear !== 'all' || selectedCountry !== 'all' || searchQuery.length > 0

  return (
    <div className="min-h-screen bg-base-100">
      {/* Trip Cover Image Carousel */}
      <div className="w-full relative overflow-hidden">
                <div className="carousel w-full" style={{ display: 'flex', minHeight: '300px' }}>
          {(filteredTrips.length > 0 ? filteredTrips.slice(0, 10) : [fallbackTrip]).map((trip, index) => {
          // Define gradient colors for different countries/categories
          const getGradientForTrip = (trip: Trip, index: number) => {
            const gradients = [
              'bg-gradient-to-br from-blue-500 via-purple-600 to-indigo-700', // Blue/Purple
              'bg-gradient-to-br from-emerald-500 via-teal-600 to-cyan-700', // Green/Teal
              'bg-gradient-to-br from-orange-500 via-red-600 to-pink-700', // Orange/Red
              'bg-gradient-to-br from-violet-500 via-purple-600 to-fuchsia-700', // Purple/Pink
              'bg-gradient-to-br from-amber-500 via-orange-600 to-red-700', // Amber/Red
            ]
            
            // Use country or category to determine gradient
            if (trip.country === 'South Korea') return gradients[0]
            if (trip.country === 'Japan') return gradients[1]
            if (trip.categories.includes('adventure')) return gradients[2]
            if (trip.categories.includes('nature')) return gradients[3]
            
            return gradients[index % gradients.length]
          }

          const hasImage = trip.coverImage?.url && trip.coverImage.url.trim() !== ''
          
          return (
            <div key={trip.id} id={`slide${index + 1}`} className="carousel-item relative w-full flex-shrink-0">
              {hasImage ? (
                <div className="w-full flex justify-center">
                  <img
                    src={trip.coverImage!.url}
                    alt={trip.coverImage?.alt || trip.title}
                    className="w-full object-cover"
                    style={{ 
                      maxHeight: '400px',
                      minHeight: '300px',
                      height: 'auto'
                    }}
                  />
                </div>
              ) : (
                <div className={`w-full min-h-[300px] h-[400px] ${getGradientForTrip(trip, index)}`}></div>
              )}
              <div className="absolute inset-0 bg-gradient-to-b from-black/20 via-black/40 to-black/60 flex items-center justify-center">
              <div className="hero-content text-center text-white max-w-4xl px-6">
                <div className="badge badge-primary badge-lg mb-4 px-4 py-2 font-semibold">{trip.country}</div>
                <h1 className="text-3xl md:text-5xl font-bold mb-4">{trip.title}</h1>
                <p className="text-base md:text-lg mb-6 opacity-90 max-w-2xl mx-auto">
                  {trip.location} • {new Date(trip.startDate).getFullYear()}
                </p>
                <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                  <Link href={`/trip/${trip.slug}`} className="btn btn-primary btn-lg">
                    View Trip Details
                  </Link>
                </div>
              </div>
            </div>
            
            {/* Navigation arrows - only show if multiple trips */}
            {filteredTrips.length > 1 && (
              <div className="absolute flex justify-between transform -translate-y-1/2 left-5 right-5 top-1/2 z-10">
                <button 
                  onClick={(e) => {
                    e.preventDefault()
                    const totalSlides = filteredTrips.length > 0 ? Math.min(filteredTrips.length, 10) : 1
                    const prevIndex = index === 0 ? totalSlides : index
                    const targetSlide = document.getElementById(`slide${prevIndex}`)
                    if (targetSlide) {
                      targetSlide.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' })
                    }
                  }}
                  className="btn btn-circle btn-ghost text-white hover:bg-white/20"
                >
                  ❮
                </button>
                <button 
                  onClick={(e) => {
                    e.preventDefault()
                    const totalSlides = filteredTrips.length > 0 ? Math.min(filteredTrips.length, 10) : 1
                    const nextIndex = index === totalSlides - 1 ? 1 : index + 2
                    const targetSlide = document.getElementById(`slide${nextIndex}`)
                    if (targetSlide) {
                      targetSlide.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' })
                    }
                  }}
                  className="btn btn-circle btn-ghost text-white hover:bg-white/20"
                >
                  ❯
                </button>
              </div>
            )}
          </div>
          )
        })}
        
        {/* Pagination dots - only show if multiple trips */}
        {filteredTrips.length > 1 && (
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2 z-10">
            {(filteredTrips.length > 0 ? filteredTrips.slice(0, 10) : [fallbackTrip]).map((_, index) => (
              <button 
                key={index}
                onClick={(e) => {
                  e.preventDefault()
                  const targetSlide = document.getElementById(`slide${index + 1}`)
                  if (targetSlide) {
                    targetSlide.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' })
                  }
                }}
                className="w-3 h-3 rounded-full bg-white/50 hover:bg-white/80 transition-colors cursor-pointer"
              />
            ))}
          </div>
        )}
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-8">
        {/* Filter Controls */}
        <div className="card bg-base-200 shadow-lg mb-8">
          <div className="card-body">
            <div className="flex flex-wrap gap-4 items-center justify-between">
              <div className="flex flex-wrap gap-4 items-center">
                {/* Year Filter */}
                <div className="form-control">
                  <label className="label">
                    <span className="label-text font-medium">Year</span>
                  </label>
                                    <select 
                    className="select select-bordered select-sm min-w-32"
                    value={selectedYear}
                    onChange={(e) => setSelectedYear(e.target.value)}
                  >
                    <option value="all">All Years</option>
                    {years.map(year => (
                      <option key={year} value={year}>{year}</option>
                    ))}
                  </select>

                {/* Country Filter */}
                <div className="form-control">
                  <label className="label">
                    <span className="label-text font-medium">Country</span>
                  </label>
                  <select 
                    className="select select-bordered select-sm min-w-40"
                    value={selectedCountry}
                    onChange={(e) => setSelectedCountry(e.target.value)}
                  >
                    <option value="all">All Countries</option>
                    {countries.map(country => (
                      <option key={country} value={country}>{country}</option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Results Count and Clear Filters */}
              <div className="flex items-center gap-4">
                <div className="stat">
                  <div className="stat-value text-lg text-primary flex items-center gap-2">
                    {filteredTrips.length}
                    {loading && <LoadingSpinner size="sm" color="primary" className="opacity-70" />}
                  </div>
                  <div className="stat-desc">trips found</div>
                </div>
                {hasActiveFilters && (
                  <button 
                    className="btn btn-outline btn-sm"
                    onClick={clearAllFilters}
                  >
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    Clear Filters
                  </button>
                )}
              </div>
            </div>

            {/* Active Filters Display */}
            {hasActiveFilters && (
              <div className="divider my-2"></div>
            )}
            {hasActiveFilters && (
              <div className="flex flex-wrap gap-2">
                {searchQuery && (
                  <div className="badge badge-primary gap-2 px-3 py-2 text-sm font-medium">
                    <span>Search: "{searchQuery}"</span>
                    <button 
                      className="w-4 h-4 rounded-full hover:bg-primary-content/20 flex items-center justify-center transition-colors"
                      onClick={() => setSearchQuery('')}
                      aria-label="Remove search filter"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                )}
                {selectedYear !== 'all' && (
                  <div className="badge badge-secondary gap-2 px-3 py-2 text-sm font-medium">
                    <span>Year: {selectedYear}</span>
                    <button 
                      className="w-4 h-4 rounded-full hover:bg-secondary-content/20 flex items-center justify-center transition-colors"
                      onClick={() => setSelectedYear('all')}
                      aria-label="Remove year filter"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                )}
                {selectedCountry !== 'all' && (
                  <div className="badge badge-accent gap-2 px-3 py-2 text-sm font-medium">
                    <span>Country: {selectedCountry}</span>
                    <button 
                      className="w-4 h-4 rounded-full hover:bg-accent-content/20 flex items-center justify-center transition-colors"
                      onClick={() => setSelectedCountry('all')}
                      aria-label="Remove country filter"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Trip Cards Grid */}
        {filteredTrips.length === 0 ? (
          <div className="card bg-base-200 shadow-inner">
            <div className="card-body text-center py-16">
              <div className="text-6xl mb-4">🗺️</div>
              <h3 className="text-2xl font-bold mb-2">No trips found</h3>
              <p className="text-base-content/60">
                {hasActiveFilters 
                  ? `No trips match your current filters. Try adjusting your search or clearing filters.`
                  : 'More amazing trips are coming soon!'
                }
              </p>
              {hasActiveFilters && (
                <button 
                  className="btn btn-primary mt-4"
                  onClick={clearAllFilters}
                >
                  Clear All Filters
                </button>
              )}
            </div>
          </div>
        ) : (
          <div className="grid gap-6 md:gap-8 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {filteredTrips.map((trip) => {
              const stats = getTripStats(trip)
              const country = getCountryFromLocation(trip.location)
              const countryFlag = {
                'South Korea': '🇰🇷',
                'Japan': '🇯🇵',
                'USA': '🇺🇸',
                'Thailand': '🇹🇭',
                'Singapore': '🇸🇬',
                'Malaysia': '🇲🇾',
                'Taiwan': '🇹🇼',
                'Hong Kong': '🇭🇰',
                'China': '🇨🇳'
              }[country] || '🌍'

              return (
                <div key={trip.id} className="card bg-base-100 shadow-xl hover:shadow-2xl transition-all duration-300 group">
                  {/* Trip Image */}
                  <figure className="relative overflow-hidden h-48">
                    <img 
                      src={trip.coverImage?.url || `/images/carousel-slide-${((trip.id.charCodeAt(0) % 4) + 1)}.svg`}
                      alt={trip.coverImage?.alt || trip.title}
                      className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                    />
                    <div className="absolute top-4 right-4">
                      <div className="badge badge-primary badge-lg font-medium px-3 py-2">
                        {stats.days} Days
                      </div>
                    </div>
                    <div className="absolute top-4 left-4">
                      <div className="badge badge-secondary badge-outline bg-base-100/90 px-3 py-2 font-medium">
                        {countryFlag} {country}
                      </div>
                    </div>
                  </figure>

                  <div className="card-body">
                    {/* Trip Title */}
                    <h2 className="card-title text-lg mb-2 line-clamp-2">
                      {trip.title}
                    </h2>
                    
                    {/* Location & Dates */}
                    <div className="flex items-center gap-2 text-sm text-base-content/60 mb-3">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                      <span>{trip.location}</span>
                    </div>
                    
                    <div className="flex items-center gap-2 text-sm text-base-content/60 mb-4">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <span>{formatDate(trip.startDate)} - {formatDate(trip.endDate)}</span>
                    </div>

                    <div className="divider my-3"></div>

                    {/* Trip Stats */}
                    <div className="flex justify-between items-center text-xs text-base-content/60 mb-4">
                      <div className="stat-title text-center">
                        <div className="stat-value text-sm font-bold text-primary">{stats.activities}</div>
                        <div>Activities</div>
                      </div>
                      <div className="stat-title text-center">
                        <div className="stat-value text-sm font-bold text-secondary">{stats.locations || 'N/A'}</div>
                        <div>Locations</div>
                      </div>
                      <div className="stat-title text-center">
                        <div className="stat-value text-sm font-bold text-accent">{stats.days}</div>
                        <div>Days</div>
                      </div>
                    </div>

                    {/* Tags */}
                    <div className="flex flex-wrap gap-1 mb-4">
                      {trip.tags.slice(0, 3).map((tag) => (
                        <div key={tag} className="badge badge-outline badge-sm text-xs px-2 py-1 font-medium">
                          #{tag}
                        </div>
                      ))}
                      {trip.tags.length > 3 && (
                        <div className="badge badge-outline badge-sm text-xs px-2 py-1 font-medium">
                          +{trip.tags.length - 3}
                        </div>
                      )}
                    </div>

                    {/* Action Buttons */}
                    <div className="card-actions justify-end items-center">
                      <Link href={`/trip/${trip.slug}`}>
                        <button className="btn btn-primary btn-sm group">
                          View Trip
                          <svg className="w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
                          </svg>
                        </button>
                      </Link>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        )}

        {/* Call to Action */}
        <div className="mt-16 text-center">
          <div className="card bg-gradient-to-r from-primary/10 to-secondary/10 shadow-inner">
            <div className="card-body py-12">
              <h3 className="text-3xl font-bold mb-4">Planning Your Next Adventure?</h3>
              <p className="text-lg text-base-content/70 mb-6 max-w-2xl mx-auto">
                Get inspired by our detailed travel guides and start planning your perfect trip today. 
                From hidden gems to popular destinations, we've got you covered.
              </p>
              <div className="flex gap-4 justify-center">
                <button className="btn btn-primary btn-lg">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  Plan New Trip
                </button>
                <button className="btn btn-outline btn-lg">
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h4a1 1 0 110 2h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6H3a1 1 0 110-2h4z" />
                  </svg>
                  Browse More
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 